#!/usr/bin/env -S deno run --no-check --allow-net=jisho.org
import { delay } from "./deps.ts";
import { DOMParser } from "https://deno.land/x/deno_dom/deno-dom-wasm.ts";

import { path } from "./deps.ts";

const url = "https://jisho.org/search/";

const words = [
  "一人",
  "一人で",
  "一度に",
  "一斉に",
  "一日",
  "一旦",
  "一昨日",
  "一生懸命",
  "一緒に",
  "一般に",
  "三日",
  "上り",
  "上手",
  "上着",
  "下り",
  "下手",
  "下着",
  "両替",
  "丸い",
  "主に",
  "久しぶり",
  "乗り換え",
  "乗り換える",
  "乗り物",
  "九つ",
  "争い",
  "二人",
  "二十日",
  "二十歳",
  "二日",
  "亡くなる",
  "交通",
  "交通事故",
  "交通費",
  "今まで",
  "今年",
  "今朝",
  "仕上げ",
  "代わり",
  "仮に",
  "企業",
  "休み",
  "似ている",
  "住まい",
  "余り",
  "作家",
  "例えば",
  "信じる",
  "俺",
  "元旦",
  "兄さん",
  "先ず",
  "先に",
  "入り口",
  "入る",
  "全て",
  "八つ",
  "八百屋",
  "六日",
  "共通",
  "具合",
  "冬休み",
  "冷やす",
  "凄い",
  "出口",
  "出掛ける",
  "出来る",
  "分",
  "分野",
  "切手",
  "切符",
  "刺身",
  "剃る",
  "助ける",
  "動き",
  "匂い",
  "化学",
  "区分",
  "十分",
  "十日",
  "半分",
  "半袖",
  "厚さ",
  "友達",
  "取れる",
  "取引",
  "受け付ける",
  "受け入れる",
  "受け取る",
  "受け持つ",
  "受け止める",
  "受付",
  "叩く",
  "可哀相",
  "可愛い",
  "叱る",
  "向こう",
  "向こう側",
  "味わう",
  "味噌汁",
  "喋る",
  "喧嘩",
  "嘘",
  "噛む",
  "四つ",
  "四つ角",
  "四日",
  "四角い",
  "固有",
  "基づく",
  "場合",
  "売り上げ",
  "売り出す",
  "売り切れ",
  "売り切れる",
  "売り場",
  "夏休み",
  "多く",
  "多分",
  "大きさ",
  "大人",
  "大人しい",
  "大好き",
  "大嫌い",
  "太陽",
  "奥さん",
  "女の子",
  "好き",
  "好み",
  "姉さん",
  "始めに",
  "姪",
  "嫌い",
  "嬉しい",
  "実は",
  "家計",
  "寒さ",
  "寝坊",
  "対する",
  "寿司",
  "小包",
  "小学校",
  "少しも",
  "少なくとも",
  "居間",
  "工学",
  "差し出す",
  "市場",
  "市場",
  "帰り",
  "年寄り",
  "幾つ",
  "幾ら",
  "広さ",
  "建物",
  "引き出し",
  "引き算",
  "引っ越し",
  "強さ",
  "当たり前",
  "役に立つ",
  "彼ら",
  "必ずしも",
  "忘れ物",
  "応じる",
  "怒り",
  "思い",
  "思い出",
  "思い出す",
  "思わず",
  "思想",
  "急に",
  "怪我",
  "恐らく",
  "恐れ",
  "息子",
  "悲しみ",
  "愛する",
  "感じ",
  "感じる",
  "感想",
  "手伝う",
  "手段",
  "手術",
  "打ち上げる",
  "打ち込む",
  "抱く",
  "押し入れ",
  "拭く",
  "持って来る",
  "持って行く",
  "挨拶",
  "掛け算",
  "支払い",
  "改めて",
  "改札口",
  "施設",
  "日記",
  "日陰",
  "早く",
  "早口",
  "早起き",
  "明後日",
  "明日",
  "明日",
  "昨夜",
  "昨日",
  "昼休み",
  "昼寝",
  "昼過ぎ",
  "時計",
  "普通",
  "景色",
  "晴れ",
  "暑さ",
  "暮らし",
  "暮れ",
  "曇り",
  "曖昧",
  "曲がり角",
  "更に",
  "書き取る",
  "書き方",
  "書き直す",
  "書留",
  "有名",
  "木綿",
  "未だ",
  "本当に",
  "枕",
  "果物",
  "梅雨",
  "椅子",
  "極めて",
  "構想",
  "横書き",
  "櫛",
  "次女",
  "次第に",
  "欲しがる",
  "歌う",
  "歌舞伎",
  "止む",
  "歯ブラシ",
  "気に入る",
  "気を付ける",
  "気分",
  "気持ち",
  "汚れ",
  "決して",
  "注文",
  "流れる",
  "流行る",
  "消しゴム",
  "深さ",
  "混む・込む",
  "演じる",
  "濡れる",
  "無くす",
  "無くなる",
  "煙草",
  "爪",
  "特に",
  "理由",
  "生き方",
  "生じる",
  "生まれ",
  "生み出す",
  "田んぼ",
  "田舎",
  "申し込む",
  "男の子",
  "異なる",
  "疑い",
  "痒い",
  "痛み",
  "痩せる",
  "皆さん",
  "目覚まし時計",
  "直ぐ",
  "相変わらず",
  "真っ暗",
  "真っ白",
  "真っ直ぐ",
  "真っ赤",
  "真っ青",
  "真っ黒",
  "真ん中",
  "真面目",
  "眼鏡",
  "着替える",
  "着物",
  "知らせ",
  "知らせる",
  "知り合い",
  "知り合う",
  "知れる",
  "石鹸",
  "祝い",
  "禁じる",
  "私",
  "私たち",
  "科学",
  "科学者",
  "積極的",
  "空き地",
  "突き当たり",
  "突き当たる",
  "立場",
  "笑顔",
  "箸",
  "糊",
  "納豆",
  "紐",
  "素晴らしい",
  "素直",
  "終わり",
  "組合",
  "経つ",
  "絵葉書",
  "絶対に",
  "織物",
  "繰り返す",
  "缶詰",
  "考え",
  "肘",
  "背広",
  "腕時計",
  "膝",
  "自主",
  "自主的",
  "自信",
  "自分",
  "自動車",
  "自由",
  "自習",
  "自身",
  "自転車",
  "良い",
  "花見",
  "若者",
  "苦しみ",
  "苦手",
  "苺",
  "茄子",
  "茶わん",
  "落ち着く",
  "葉書",
  "葡萄",
  "蕎麦",
  "行き",
  "袖",
  "被る",
  "襖",
  "見つかる",
  "見つける",
  "見方",
  "見送り",
  "見送る",
  "言い方",
  "訳す",
  "訴え",
  "試合",
  "詩人",
  "誤り",
  "読み",
  "読み方",
  "誰",
  "誰か",
  "調べ",
  "買い物",
  "貸し出す",
  "貼る",
  "賑やか",
  "賭ける",
  "贈り物",
  "赤ちゃん",
  "足し算",
  "踏切",
  "蹴る",
  "近く",
  "近付く",
  "追い越す",
  "送り仮名",
  "通り",
  "通勤",
  "通学",
  "通常",
  "通過",
  "速さ",
  "逢う",
  "連れて来る",
  "連れて行く",
  "遅れ",
  "遊び",
  "達する",
  "遠く",
  "部分",
  "部屋",
  "郵便屋さん",
  "酔っ払い",
  "酔っ払う",
  "酸っぱい",
  "醤油",
  "重さ",
  "重み",
  "金持ち",
  "鋏",
  "鍋",
  "鍵",
  "長さ",
  "長袖",
  "間に合う",
  "間違い",
  "関する",
  "限り",
  "随分",
  "集まり",
  "非常に",
  "鞄",
  "頃",
  "頻りに",
  "顎",
  "風呂",
  "風呂屋",
  "食べ物",
  "飲み物",
  "飴",
  "馬鹿",
  "騒ぎ",
  "驚き",
  "高い",
  "高さ",
  "髪の毛",
  "黄色い",
];

export async function fetchReading(
  word: string,
): Promise<string[]> {
  try {
    const res = await fetch(url + word);
    const html = await res.text();
    const document: any = new DOMParser().parseFromString(html, "text/html");
    var children = document.querySelector(".furigana").children;
    var furiganas: string[] = [];
    for (const child of children) {
      furiganas = furiganas.concat(child.textContent);
    }
    return furiganas;
  } catch (error) {
    console.log(error);
  }
}

export async function fetchFromJisho(): Promise<string[][]> {
  var result = [];
  for (const word of words) {
    result.push(await fetchReading(word));
    await delay(2000);
  }
  console.log(result);
  return result;
}


const pathFile = path.join(path.join(Deno.cwd(), "file"), ".");
Deno.writeTextFileSync(
  pathFile,
  (
    await JSON.stringify(await fetchFromJisho())
  ),
);

/*
export async function getJson(
  promise: Promise<Response>,
): Promise<unknown> {
  try {
    return await promise.then((response) => {
      return response.json();
    }).then(async (jsonData) => {
      return await jsonData;
    });
  } catch (error) {
    if (error instanceof SyntaxError) {
      console.error("Not a JSON response!");
      return {
        data: [],
      };
    }
  }
}
*/
